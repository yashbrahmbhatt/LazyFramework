<Activity mc:Ignorable="sap sap2010" x:Class="AddModules" sap2010:ExpressionActivityEditor.ExpressionActivityEditor="C#" sap:VirtualizedContainerService.HintSize="997,5432" sap2010:WorkflowViewState.IdRef="ActivityBuilder_1" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:sc="clr-namespace:System.Collections;assembly=System.Private.CoreLib" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:ue="clr-namespace:UiPath.Excel;assembly=UiPath.Excel.Activities" xmlns:ueab="clr-namespace:UiPath.Excel.Activities.Business;assembly=UiPath.Excel.Activities" xmlns:ufa="clr-namespace:UiPath.Forms.Activities;assembly=UiPath.Forms.Activities" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:usfr="clr-namespace:UiPath.Studio.Forms.Runtime;assembly=UiPath.Studio.Forms.Runtime" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>UiPath.Studio.Forms.Runtime</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>UiPath.Forms.Activities</x:String>
      <x:String>UiPath.Platform.GlobalVariables</x:String>
      <x:String>UiPath.Forms.Activities.Base</x:String>
      <x:String>UiPath.Platform.Triggers</x:String>
      <x:String>UiPath.Platform.Triggers.Scope</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Core.Activities.Orchestrator</x:String>
      <x:String>UiPath.Activities.System</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.DataTableUtilities</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities.Business</x:String>
      <x:String>UiPath.Excel.Model</x:String>
      <x:String>UiPath.Shared.Activities.Business</x:String>
      <x:String>UiPath.Core.Activities.Storage</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.AccessControl</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.DriveInfo</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.Watcher</AssemblyReference>
      <AssemblyReference>System.IO.Packaging</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Xml.ReaderWriter</AssemblyReference>
      <AssemblyReference>UiPath.Forms.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Forms.Runtime</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.ViewModels</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Persistence.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Accelerates creating new modules by prompting the user for set of modules they want to create, and copies the configs, templates, and all workflow files for that module." DisplayName="AddModules" sap:VirtualizedContainerService.HintSize="825,5367" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="sd:DataTable" Name="dt_Modules" />
      <Variable x:TypeArguments="scg:Dictionary(x:String, sd:DataSet)" Name="ExcelFiles" />
      <Variable x:TypeArguments="sd:DataTable" Name="dt_ModuleConfig" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="LM: Start" sap:VirtualizedContainerService.HintSize="763,141" sap2010:WorkflowViewState.IdRef="LogMessage_1">
      <ui:LogMessage.Level>
        <InArgument x:TypeArguments="ui:LogLevel">
          <CSharpValue x:TypeArguments="ui:LogLevel" sap2010:WorkflowViewState.IdRef="CSharpValue`1_51">UiPath.Core.Activities.LogLevel.Info</CSharpValue>
        </InArgument>
      </ui:LogMessage.Level>
      <ui:LogMessage.Message>
        <InArgument x:TypeArguments="x:Object">
          <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_52">"Starting AddModules"</CSharpValue>
        </InArgument>
      </ui:LogMessage.Message>
    </ui:LogMessage>
    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Load AddModules Config" sap:VirtualizedContainerService.HintSize="763,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_2" UnSafe="False" WorkflowFileName="Utility\\LoadConfig.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="in_ConfigPath">Configure/AddModulesConfig.xlsx</InArgument>
        <InArgument x:TypeArguments="s:String[]" x:Key="in_IgnoreSheets">
          <CSharpValue x:TypeArguments="s:String[]" sap2010:WorkflowViewState.IdRef="CSharpValue`1_3">new string[]{}</CSharpValue>
        </InArgument>
        <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="out_Config" />
        <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="out_TextFiles" />
        <OutArgument x:TypeArguments="scg:Dictionary(x:String, sd:DataSet)" x:Key="out_ExcelFiles">
          <CSharpReference x:TypeArguments="scg:Dictionary(x:String, sd:DataSet)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_8">ExcelFiles</CSharpReference>
        </OutArgument>
      </ui:InvokeWorkflowFile.Arguments>
    </ui:InvokeWorkflowFile>
    <ui:MultipleAssign DisplayName="Parse Config" sap:VirtualizedContainerService.HintSize="763,101" sap2010:WorkflowViewState.IdRef="MultipleAssign_1">
      <ui:MultipleAssign.AssignOperations>
        <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_1">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="sd:DataTable">
                <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_9">dt_ModuleConfig</CSharpReference>
              </OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="sd:DataTable">
                <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_4">ExcelFiles["ModuleConfig"].Tables["Modules"]</CSharpValue>
              </InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
        </scg:List>
      </ui:MultipleAssign.AssignOperations>
    </ui:MultipleAssign>
    <ui:LogMessage DisplayName="LM: Form Start" sap:VirtualizedContainerService.HintSize="763,141" sap2010:WorkflowViewState.IdRef="LogMessage_2">
      <ui:LogMessage.Level>
        <InArgument x:TypeArguments="ui:LogLevel">
          <CSharpValue x:TypeArguments="ui:LogLevel" sap2010:WorkflowViewState.IdRef="CSharpValue`1_53">UiPath.Core.Activities.LogLevel.Info</CSharpValue>
        </InArgument>
      </ui:LogMessage.Level>
      <ui:LogMessage.Message>
        <InArgument x:TypeArguments="x:Object">
          <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_54">"Showing form..."</CSharpValue>
        </InArgument>
      </ui:LogMessage.Message>
    </ui:LogMessage>
    <ufa:ShowFormActivity Height="{x:Null}" InstanceName="{x:Null}" Left="{x:Null}" Title="{x:Null}" Top="{x:Null}" Width="{x:Null}" DisplayName="Show Modules Form" FormId="9d64f5ce-189e-42ed-b129-86e707bd72ee" sap:VirtualizedContainerService.HintSize="763,186" sap2010:WorkflowViewState.IdRef="ShowFormActivity_2" IsAsync="False">
      <ufa:ShowFormActivity.Arguments>
        <OutArgument x:TypeArguments="sd:DataTable" x:Key="modules">
          <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_35">dt_Modules</CSharpReference>
        </OutArgument>
      </ufa:ShowFormActivity.Arguments>
      <ufa:ShowFormActivity.ShowInTaskbar>
        <InArgument x:TypeArguments="s:Nullable(x:Boolean)">
          <Literal x:TypeArguments="s:Nullable(x:Boolean)" Value="True" />
        </InArgument>
      </ufa:ShowFormActivity.ShowInTaskbar>
      <ufa:ShowFormActivity.ShowMargin>
        <InArgument x:TypeArguments="s:Nullable(x:Boolean)">
          <Literal x:TypeArguments="s:Nullable(x:Boolean)" Value="True" />
        </InArgument>
      </ufa:ShowFormActivity.ShowMargin>
      <ufa:ShowFormActivity.TopMost>
        <InArgument x:TypeArguments="s:Nullable(x:Boolean)">
          <Literal x:TypeArguments="s:Nullable(x:Boolean)" Value="True" />
        </InArgument>
      </ufa:ShowFormActivity.TopMost>
      <ufa:ShowFormActivity.WindowState>
        <InArgument x:TypeArguments="s:Nullable(usfr:WindowState)">
          <CSharpValue x:TypeArguments="s:Nullable(usfr:WindowState)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_2">UiPath.Studio.Forms.Runtime.WindowState.Normal</CSharpValue>
        </InArgument>
      </ufa:ShowFormActivity.WindowState>
    </ufa:ShowFormActivity>
    <ui:LogMessage DisplayName="LM: Form Complete" sap:VirtualizedContainerService.HintSize="763,141" sap2010:WorkflowViewState.IdRef="LogMessage_3">
      <ui:LogMessage.Level>
        <InArgument x:TypeArguments="ui:LogLevel">
          <CSharpValue x:TypeArguments="ui:LogLevel" sap2010:WorkflowViewState.IdRef="CSharpValue`1_55">UiPath.Core.Activities.LogLevel.Info</CSharpValue>
        </InArgument>
      </ui:LogMessage.Level>
      <ui:LogMessage.Message>
        <InArgument x:TypeArguments="x:Object">
          <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_56">string.Format("Form submitted. {0} rows to process.", dt_Modules == null ? "0" : dt_Modules.RowCount())</CSharpValue>
        </InArgument>
      </ui:LogMessage.Message>
    </ui:LogMessage>
    <ui:ForEachRow ColumnNames="{x:Null}" CurrentIndex="{x:Null}" DisplayName="For Each Module" sap:VirtualizedContainerService.HintSize="763,4151" sap2010:WorkflowViewState.IdRef="ForEachRow_1">
      <ui:ForEachRow.Body>
        <ActivityAction x:TypeArguments="sd:DataRow">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="sd:DataRow" Name="CurrentRow" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="729,4034" sap2010:WorkflowViewState.IdRef="Sequence_3">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:String" Name="TargetPath" />
              <Variable x:TypeArguments="x:String" Name="Name" />
              <Variable x:TypeArguments="x:String" Name="Type" />
              <Variable x:TypeArguments="sd:DataRow" Name="ConfigRow" />
              <Variable x:TypeArguments="s:String[]" Name="ModuleFiles" />
              <Variable x:TypeArguments="x:String" Name="ModuleRoot" />
              <Variable x:TypeArguments="x:String" Name="ModuleConfigPath" />
              <Variable x:TypeArguments="s:String[]" Name="ModuleTemplates" />
            </Sequence.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:LogMessage DisplayName="LM: Module Start" sap:VirtualizedContainerService.HintSize="667,141" sap2010:WorkflowViewState.IdRef="LogMessage_4">
              <ui:LogMessage.Level>
                <InArgument x:TypeArguments="ui:LogLevel">
                  <CSharpValue x:TypeArguments="ui:LogLevel" sap2010:WorkflowViewState.IdRef="CSharpValue`1_57">UiPath.Core.Activities.LogLevel.Info</CSharpValue>
                </InArgument>
              </ui:LogMessage.Level>
              <ui:LogMessage.Message>
                <InArgument x:TypeArguments="x:Object">
                  <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_58">string.Format("Processing module '{0}'", CurrentRow["moduleName"].ToString())</CSharpValue>
                </InArgument>
              </ui:LogMessage.Message>
            </ui:LogMessage>
            <ui:MultipleAssign DisplayName="Parse Values" sap:VirtualizedContainerService.HintSize="667,52" sap2010:WorkflowViewState.IdRef="MultipleAssign_2">
              <ui:MultipleAssign.AssignOperations>
                <scg:List x:TypeArguments="ui:AssignOperation" Capacity="8">
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_4">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">
                        <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_18">Name</CSharpReference>
                      </OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_12">CurrentRow["moduleName"].ToString()</CSharpValue>
                      </InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_5">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">
                        <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_19">Type</CSharpReference>
                      </OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_13">CurrentRow["moduleType"].ToString()</CSharpValue>
                      </InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_6">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="sd:DataRow">
                        <CSharpReference x:TypeArguments="sd:DataRow" sap2010:WorkflowViewState.IdRef="CSharpReference`1_20">ConfigRow</CSharpReference>
                      </OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="sd:DataRow">
                        <CSharpValue x:TypeArguments="sd:DataRow" sap2010:WorkflowViewState.IdRef="CSharpValue`1_39">dt_ModuleConfig.AsEnumerable().First(r =&gt; r["Key"].ToString() == Type)</CSharpValue>
                      </InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_8">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">
                        <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_23">ModuleRoot</CSharpReference>
                      </OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_21">ConfigRow["WorkflowsRoot"].ToString()</CSharpValue>
                      </InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_7">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="s:String[]">
                        <CSharpReference x:TypeArguments="s:String[]" sap2010:WorkflowViewState.IdRef="CSharpReference`1_21">ModuleFiles</CSharpReference>
                      </OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="s:String[]">
                        <CSharpValue x:TypeArguments="s:String[]" sap2010:WorkflowViewState.IdRef="CSharpValue`1_20">Directory.GetFiles(ModuleRoot, "*", SearchOption.AllDirectories)</CSharpValue>
                      </InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_9">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">
                        <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_24">ModuleConfigPath</CSharpReference>
                      </OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_22">ConfigRow["Config"].ToString()</CSharpValue>
                      </InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_10">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="s:String[]">
                        <CSharpReference x:TypeArguments="s:String[]" sap2010:WorkflowViewState.IdRef="CSharpReference`1_26">ModuleTemplates</CSharpReference>
                      </OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="s:String[]">
                        <CSharpValue x:TypeArguments="s:String[]" sap2010:WorkflowViewState.IdRef="CSharpValue`1_24">ConfigRow["Templates"].ToString().Split(",", StringSplitOptions.RemoveEmptyEntries)</CSharpValue>
                      </InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                </scg:List>
              </ui:MultipleAssign.AssignOperations>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:MultipleAssign>
            <ui:MessageBox ChosenButton="{x:Null}" AutoCloseAfter="00:00:00" Buttons="Ok" Caption="Select Folder" DisplayName="Message for Folder" sap:VirtualizedContainerService.HintSize="667,85" sap2010:WorkflowViewState.IdRef="MessageBox_1" TopMost="True">
              <ui:MessageBox.Text>
                <InArgument x:TypeArguments="x:Object">
                  <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_15">string.Format("Please select the folder you would like to use for the '{0}' module.", Name)</CSharpValue>
                </InArgument>
              </ui:MessageBox.Text>
            </ui:MessageBox>
            <ui:SelectFolder DisplayName="Prompt Folder Select" sap:VirtualizedContainerService.HintSize="667,79" sap2010:WorkflowViewState.IdRef="SelectFolder_1">
              <ui:SelectFolder.SelectedFolder>
                <OutArgument x:TypeArguments="x:String">
                  <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_12">TargetPath</CSharpReference>
                </OutArgument>
              </ui:SelectFolder.SelectedFolder>
            </ui:SelectFolder>
            <ui:LogMessage DisplayName="LM: Folder Selected" sap:VirtualizedContainerService.HintSize="667,141" sap2010:WorkflowViewState.IdRef="LogMessage_5">
              <ui:LogMessage.Level>
                <InArgument x:TypeArguments="ui:LogLevel">
                  <CSharpValue x:TypeArguments="ui:LogLevel" sap2010:WorkflowViewState.IdRef="CSharpValue`1_59">UiPath.Core.Activities.LogLevel.Info</CSharpValue>
                </InArgument>
              </ui:LogMessage.Level>
              <ui:LogMessage.Message>
                <InArgument x:TypeArguments="x:Object">
                  <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_60">string.Format("Folder selected at {0}", TargetPath)</CSharpValue>
                </InArgument>
              </ui:LogMessage.Message>
            </ui:LogMessage>
            <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="Copy All Files From Modules Root" sap:VirtualizedContainerService.HintSize="667,1535" sap2010:WorkflowViewState.IdRef="ForEach`1_2">
              <ui:ForEach.Body>
                <ActivityAction x:TypeArguments="x:String">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="x:String" Name="ModuleFile" />
                  </ActivityAction.Argument>
                  <Sequence DisplayName="Copy File" sap:VirtualizedContainerService.HintSize="541,1349" sap2010:WorkflowViewState.IdRef="Sequence_4">
                    <Sequence.Variables>
                      <Variable x:TypeArguments="x:String" Name="TargetFilePath" />
                    </Sequence.Variables>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:MultipleAssign DisplayName="Set Target Path" sap:VirtualizedContainerService.HintSize="499,101" sap2010:WorkflowViewState.IdRef="MultipleAssign_3">
                      <ui:MultipleAssign.AssignOperations>
                        <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
                          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_11">
                            <ui:AssignOperation.To>
                              <OutArgument x:TypeArguments="x:String">
                                <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_27">TargetFilePath</CSharpReference>
                              </OutArgument>
                            </ui:AssignOperation.To>
                            <ui:AssignOperation.Value>
                              <InArgument x:TypeArguments="x:String">
                                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_40">ModuleFile.Replace(ModuleRoot, TargetPath)</CSharpValue>
                              </InArgument>
                            </ui:AssignOperation.Value>
                          </ui:AssignOperation>
                        </scg:List>
                      </ui:MultipleAssign.AssignOperations>
                    </ui:MultipleAssign>
                    <If DisplayName="Workflow File?" sap:VirtualizedContainerService.HintSize="499,1120" sap2010:WorkflowViewState.IdRef="If_1">
                      <If.Condition>
                        <InArgument x:TypeArguments="x:Boolean">
                          <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_19">ModuleFile.Contains(".xaml")</CSharpValue>
                        </InArgument>
                      </If.Condition>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <If.Then>
                        <Sequence DisplayName="Is Workflow" sap:VirtualizedContainerService.HintSize="465,784" sap2010:WorkflowViewState.IdRef="Sequence_5">
                          <Sequence.Variables>
                            <Variable x:TypeArguments="x:String" Name="XAMLText" />
                          </Sequence.Variables>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ui:ReadTextFile File="{x:Null}" DisplayName="Read File" sap:VirtualizedContainerService.HintSize="423,80" sap2010:WorkflowViewState.IdRef="ReadTextFile_1">
                            <ui:ReadTextFile.Content>
                              <OutArgument x:TypeArguments="x:String">
                                <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_28">XAMLText</CSharpReference>
                              </OutArgument>
                            </ui:ReadTextFile.Content>
                            <ui:ReadTextFile.FileName>
                              <InArgument x:TypeArguments="x:String">
                                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_29">ModuleFile</CSharpValue>
                              </InArgument>
                            </ui:ReadTextFile.FileName>
                          </ui:ReadTextFile>
                          <If DisplayName="Folder Exists for File?" sap:VirtualizedContainerService.HintSize="423,262" sap2010:WorkflowViewState.IdRef="If_2">
                            <If.Condition>
                              <InArgument x:TypeArguments="x:Boolean">
                                <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_42">!Directory.Exists(Path.GetDirectoryName(TargetFilePath))</CSharpValue>
                              </InArgument>
                            </If.Condition>
                            <If.Then>
                              <ui:CreateDirectory ContinueOnError="{x:Null}" Output="{x:Null}" DisplayName="Create Folder For File" sap:VirtualizedContainerService.HintSize="334,80" sap2010:WorkflowViewState.IdRef="CreateDirectory_1">
                                <ui:CreateDirectory.Path>
                                  <InArgument x:TypeArguments="x:String">
                                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_43">Path.GetDirectoryName(TargetFilePath)</CSharpValue>
                                  </InArgument>
                                </ui:CreateDirectory.Path>
                              </ui:CreateDirectory>
                            </If.Then>
                            <If.Else>
                              <Sequence DisplayName="" sap2010:WorkflowViewState.IdRef="Sequence_12" />
                            </If.Else>
                          </If>
                          <ui:MultipleAssign DisplayName="Replace Invoke Paths" sap:VirtualizedContainerService.HintSize="423,101" sap2010:WorkflowViewState.IdRef="MultipleAssign_4">
                            <ui:MultipleAssign.AssignOperations>
                              <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
                                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_14">
                                  <ui:AssignOperation.To>
                                    <OutArgument x:TypeArguments="x:String">
                                      <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_30">XAMLText</CSharpReference>
                                    </OutArgument>
                                  </ui:AssignOperation.To>
                                  <ui:AssignOperation.Value>
                                    <InArgument x:TypeArguments="x:String">
                                      <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_63" xml:space="preserve">XAMLText.Replace(ModuleRoot, TargetPath)
.Replace(ModuleRoot.Replace("\\","\\\\"), TargetPath)
.Replace(Directory.GetCurrentDirectory() +"\\", "")
.Replace(".templates\\Data", "Data")
.Replace(".templates\\\\Data", "Data\\")</CSharpValue>
                                    </InArgument>
                                  </ui:AssignOperation.Value>
                                </ui:AssignOperation>
                              </scg:List>
                            </ui:MultipleAssign.AssignOperations>
                          </ui:MultipleAssign>
                          <ui:WriteTextFile File="{x:Null}" DisplayName="Write Target File" sap:VirtualizedContainerService.HintSize="423,133" sap2010:WorkflowViewState.IdRef="WriteTextFile_1">
                            <ui:WriteTextFile.FileName>
                              <InArgument x:TypeArguments="x:String">
                                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_30">TargetFilePath</CSharpValue>
                              </InArgument>
                            </ui:WriteTextFile.FileName>
                            <ui:WriteTextFile.Text>
                              <InArgument x:TypeArguments="x:String">
                                <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_33">XAMLText</CSharpValue>
                              </InArgument>
                            </ui:WriteTextFile.Text>
                          </ui:WriteTextFile>
                        </Sequence>
                      </If.Then>
                      <If.Else>
                        <ui:CopyFile ContinueOnError="{x:Null}" DisplayName="Copy Other File" sap:VirtualizedContainerService.HintSize="334,154" sap2010:WorkflowViewState.IdRef="CopyFile_4">
                          <ui:CopyFile.Destination>
                            <InArgument x:TypeArguments="x:String">
                              <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_49">TargetFilePath</CSharpValue>
                            </InArgument>
                          </ui:CopyFile.Destination>
                          <ui:CopyFile.Path>
                            <InArgument x:TypeArguments="x:String">
                              <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_48">ModuleFile</CSharpValue>
                            </InArgument>
                          </ui:CopyFile.Path>
                        </ui:CopyFile>
                      </If.Else>
                    </If>
                  </Sequence>
                </ActivityAction>
              </ui:ForEach.Body>
              <ui:ForEach.Values>
                <InArgument x:TypeArguments="sc:IEnumerable">
                  <CSharpValue x:TypeArguments="sc:IEnumerable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_17">ModuleFiles</CSharpValue>
                </InArgument>
              </ui:ForEach.Values>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:ForEach>
            <ui:CopyFile ContinueOnError="{x:Null}" DisplayName="Copy Config" sap:VirtualizedContainerService.HintSize="667,154" sap2010:WorkflowViewState.IdRef="CopyFile_2">
              <ui:CopyFile.Destination>
                <InArgument x:TypeArguments="x:String">
                  <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_35">Path.Combine(Directory.GetCurrentDirectory(), "Data\\Configs", Name + "Config.xlsx")</CSharpValue>
                </InArgument>
              </ui:CopyFile.Destination>
              <ui:CopyFile.Path>
                <InArgument x:TypeArguments="x:String">
                  <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_34">ModuleConfigPath</CSharpValue>
                </InArgument>
              </ui:CopyFile.Path>
            </ui:CopyFile>
            <ueab:ExcelProcessScopeX LaunchTimeout="{x:Null}" DisplayAlerts="False" DisplayName="Excel Process Scope" ExistingProcessAction="ForceKill" FileConflictResolution="PromptUser" sap:VirtualizedContainerService.HintSize="667,1183" sap2010:WorkflowViewState.IdRef="ExcelProcessScopeX_1" LaunchMethod="Automation" MacroSettings="EnableAll" ProcessMode="AlwaysCreateNew" ShowExcelWindow="False">
              <ueab:ExcelProcessScopeX.Body>
                <ActivityAction x:TypeArguments="ui:IExcelProcess">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="ui:IExcelProcess" Name="ExcelProcessScopeTag" />
                  </ActivityAction.Argument>
                  <ueab:ExcelApplicationCard Password="{x:Null}" ReadFormatting="{x:Null}" CreateNewFile="False" DisplayName="Use Excel File" sap:VirtualizedContainerService.HintSize="633,1096" sap2010:WorkflowViewState.IdRef="ExcelApplicationCard_1" ResizeWindow="None">
                    <ueab:ExcelApplicationCard.Body>
                      <ActivityAction x:TypeArguments="ue:IWorkbookQuickHandle">
                        <ActivityAction.Argument>
                          <DelegateInArgument x:TypeArguments="ue:IWorkbookQuickHandle" Name="Excel" />
                        </ActivityAction.Argument>
                        <ueab:ForEachSheetX DisplayName="For Each Excel Sheet" sap:VirtualizedContainerService.HintSize="599,827" sap2010:WorkflowViewState.IdRef="ForEachSheetX_1">
                          <ueab:ForEachSheetX.Body>
                            <ActivityAction x:TypeArguments="ue:WorksheetQuickHandle, x:Int32">
                              <ActivityAction.Argument1>
                                <DelegateInArgument x:TypeArguments="ue:WorksheetQuickHandle" Name="ConfigSheet" />
                              </ActivityAction.Argument1>
                              <ActivityAction.Argument2>
                                <DelegateInArgument x:TypeArguments="x:Int32" Name="CurrentIndex" />
                              </ActivityAction.Argument2>
                              <ueab:ExcelForEachRowX DisplayName="For Each Excel Row" EmptyRowBehavior="StopAfterThreeConsecutiveEmptyRows" HasHeaders="True" sap:VirtualizedContainerService.HintSize="565,671" sap2010:WorkflowViewState.IdRef="ExcelForEachRowX_1" SaveAfterEachRow="False">
                                <ueab:ExcelForEachRowX.Body>
                                  <ActivityAction x:TypeArguments="ue:CurrentRowQuickHandle, x:Int32">
                                    <ActivityAction.Argument1>
                                      <DelegateInArgument x:TypeArguments="ue:CurrentRowQuickHandle" Name="ConfigExcelRow" />
                                    </ActivityAction.Argument1>
                                    <ActivityAction.Argument2>
                                      <DelegateInArgument x:TypeArguments="x:Int32" Name="CurrentIndex" />
                                    </ActivityAction.Argument2>
                                    <If DisplayName="Not Empty Row?" sap:VirtualizedContainerService.HintSize="531,489" sap2010:WorkflowViewState.IdRef="If_5">
                                      <If.Condition>
                                        <InArgument x:TypeArguments="x:Boolean">
                                          <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_67">!string.IsNullOrEmpty(ConfigExcelRow["Name"].ToString())</CSharpValue>
                                        </InArgument>
                                      </If.Condition>
                                      <If.Then>
                                        <Switch x:TypeArguments="x:String" DisplayName="Sheet Name?" sap:VirtualizedContainerService.HintSize="497,307" sap2010:WorkflowViewState.IdRef="Switch`1_1">
                                          <Switch.Default>
                                            <ui:MultipleAssign DisplayName="Update Value" sap:VirtualizedContainerService.HintSize="423,101" sap2010:WorkflowViewState.IdRef="MultipleAssign_9">
                                              <ui:MultipleAssign.AssignOperations>
                                                <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
                                                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_19">
                                                    <ui:AssignOperation.To>
                                                      <OutArgument x:TypeArguments="ue:ExcelValue">
                                                        <CSharpReference x:TypeArguments="ue:ExcelValue" sap2010:WorkflowViewState.IdRef="CSharpReference`1_46">ConfigExcelRow["Value"]</CSharpReference>
                                                      </OutArgument>
                                                    </ui:AssignOperation.To>
                                                    <ui:AssignOperation.Value>
                                                      <InArgument x:TypeArguments="ue:ExcelValue">
                                                        <CSharpValue x:TypeArguments="ue:ExcelValue" sap2010:WorkflowViewState.IdRef="CSharpValue`1_94">ConfigExcelRow["Value"].Replace(".templates\\Data", "Data")</CSharpValue>
                                                      </InArgument>
                                                    </ui:AssignOperation.Value>
                                                  </ui:AssignOperation>
                                                </scg:List>
                                              </ui:MultipleAssign.AssignOperations>
                                            </ui:MultipleAssign>
                                          </Switch.Default>
                                          <Switch.Expression>
                                            <InArgument x:TypeArguments="x:String">
                                              <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_68">ConfigSheet.Name</CSharpValue>
                                            </InArgument>
                                          </Switch.Expression>
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                          <ui:MultipleAssign x:Key="TextFiles" DisplayName="Update Path (TextFiles)" sap:VirtualizedContainerService.HintSize="423,101" sap2010:WorkflowViewState.IdRef="MultipleAssign_10">
                                            <ui:MultipleAssign.AssignOperations>
                                              <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
                                                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_20">
                                                  <ui:AssignOperation.To>
                                                    <OutArgument x:TypeArguments="ue:ExcelValue">
                                                      <CSharpReference x:TypeArguments="ue:ExcelValue" sap2010:WorkflowViewState.IdRef="CSharpReference`1_47">ConfigExcelRow["Path"]</CSharpReference>
                                                    </OutArgument>
                                                  </ui:AssignOperation.To>
                                                  <ui:AssignOperation.Value>
                                                    <InArgument x:TypeArguments="ue:ExcelValue">
                                                      <CSharpValue x:TypeArguments="ue:ExcelValue" sap2010:WorkflowViewState.IdRef="CSharpValue`1_95">ConfigExcelRow["Path"].Replace(".templates\\Data", "Data")</CSharpValue>
                                                    </InArgument>
                                                  </ui:AssignOperation.Value>
                                                </ui:AssignOperation>
                                              </scg:List>
                                            </ui:MultipleAssign.AssignOperations>
                                          </ui:MultipleAssign>
                                          <ui:MultipleAssign x:Key="ExcelFiles" DisplayName="Update Path (ExcelFiles)" sap:VirtualizedContainerService.HintSize="423,101" sap2010:WorkflowViewState.IdRef="MultipleAssign_11">
                                            <ui:MultipleAssign.AssignOperations>
                                              <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
                                                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_21">
                                                  <ui:AssignOperation.To>
                                                    <OutArgument x:TypeArguments="ue:ExcelValue">
                                                      <CSharpReference x:TypeArguments="ue:ExcelValue" sap2010:WorkflowViewState.IdRef="CSharpReference`1_48">ConfigExcelRow["Path"]</CSharpReference>
                                                    </OutArgument>
                                                  </ui:AssignOperation.To>
                                                  <ui:AssignOperation.Value>
                                                    <InArgument x:TypeArguments="ue:ExcelValue">
                                                      <CSharpValue x:TypeArguments="ue:ExcelValue" sap2010:WorkflowViewState.IdRef="CSharpValue`1_96">ConfigExcelRow["Path"].Replace(".templates\\Data", "Data")</CSharpValue>
                                                    </InArgument>
                                                  </ui:AssignOperation.Value>
                                                </ui:AssignOperation>
                                              </scg:List>
                                            </ui:MultipleAssign.AssignOperations>
                                          </ui:MultipleAssign>
                                        </Switch>
                                      </If.Then>
                                      <If.Else>
                                        <Sequence DisplayName="" sap2010:WorkflowViewState.IdRef="Sequence_19" />
                                      </If.Else>
                                    </If>
                                  </ActivityAction>
                                </ueab:ExcelForEachRowX.Body>
                                <ueab:ExcelForEachRowX.Range>
                                  <InArgument x:TypeArguments="ue:IReadRangeRef">
                                    <CSharpValue x:TypeArguments="ue:IReadRangeRef" sap2010:WorkflowViewState.IdRef="CSharpValue`1_66">ConfigSheet</CSharpValue>
                                  </InArgument>
                                </ueab:ExcelForEachRowX.Range>
                              </ueab:ExcelForEachRowX>
                            </ActivityAction>
                          </ueab:ForEachSheetX.Body>
                          <ueab:ForEachSheetX.Workbook>
                            <InArgument x:TypeArguments="ue:IWorkbookQuickHandle">
                              <CSharpValue x:TypeArguments="ue:IWorkbookQuickHandle" sap2010:WorkflowViewState.IdRef="CSharpValue`1_65">Excel</CSharpValue>
                            </InArgument>
                          </ueab:ForEachSheetX.Workbook>
                        </ueab:ForEachSheetX>
                      </ActivityAction>
                    </ueab:ExcelApplicationCard.Body>
                    <ueab:ExcelApplicationCard.WorkbookPath>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_64">Path.Combine(Directory.GetCurrentDirectory(), "Data\\Configs", Name + "Config.xlsx")</CSharpValue>
                      </InArgument>
                    </ueab:ExcelApplicationCard.WorkbookPath>
                  </ueab:ExcelApplicationCard>
                </ActivityAction>
              </ueab:ExcelProcessScopeX.Body>
            </ueab:ExcelProcessScopeX>
            <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="Copy Templates" sap:VirtualizedContainerService.HintSize="667,52" sap2010:WorkflowViewState.IdRef="ForEach`1_3">
              <ui:ForEach.Body>
                <ActivityAction x:TypeArguments="x:String">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="x:String" Name="TemplateFile" />
                  </ActivityAction.Argument>
                  <Sequence DisplayName="Copy Template File Steps" sap:VirtualizedContainerService.HintSize="410,544" sap2010:WorkflowViewState.IdRef="Sequence_7">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <If DisplayName="Template File's Folder Exists?" sap:VirtualizedContainerService.HintSize="368,262" sap2010:WorkflowViewState.IdRef="If_3">
                      <If.Condition>
                        <InArgument x:TypeArguments="x:Boolean">
                          <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_45">!Directory.Exists(Path.GetDirectoryName(Path.Combine(Directory.GetCurrentDirectory(), TemplateFile.Replace(".templates\\", ""))))</CSharpValue>
                        </InArgument>
                      </If.Condition>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <If.Then>
                        <ui:CreateDirectory ContinueOnError="{x:Null}" Output="{x:Null}" DisplayName="Create Templates Folder" sap:VirtualizedContainerService.HintSize="334,80" sap2010:WorkflowViewState.IdRef="CreateDirectory_3">
                          <ui:CreateDirectory.Path>
                            <InArgument x:TypeArguments="x:String">
                              <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_50">Path.GetDirectoryName(Path.Combine(Directory.GetCurrentDirectory(), TemplateFile.Replace(".templates\\", "")))</CSharpValue>
                            </InArgument>
                          </ui:CreateDirectory.Path>
                        </ui:CreateDirectory>
                      </If.Then>
                    </If>
                    <ui:CopyFile ContinueOnError="{x:Null}" DisplayName="Copy Template File" sap:VirtualizedContainerService.HintSize="368,154" sap2010:WorkflowViewState.IdRef="CopyFile_3">
                      <ui:CopyFile.Destination>
                        <InArgument x:TypeArguments="x:String">
                          <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_38">Path.Combine(Directory.GetCurrentDirectory(), TemplateFile.Replace(".templates\\", ""))</CSharpValue>
                        </InArgument>
                      </ui:CopyFile.Destination>
                      <ui:CopyFile.Path>
                        <InArgument x:TypeArguments="x:String">
                          <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_37">Path.Combine(Directory.GetCurrentDirectory(), TemplateFile)</CSharpValue>
                        </InArgument>
                      </ui:CopyFile.Path>
                    </ui:CopyFile>
                  </Sequence>
                </ActivityAction>
              </ui:ForEach.Body>
              <ui:ForEach.Values>
                <InArgument x:TypeArguments="sc:IEnumerable">
                  <CSharpValue x:TypeArguments="sc:IEnumerable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_36">ModuleTemplates</CSharpValue>
                </InArgument>
              </ui:ForEach.Values>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:ForEach>
            <ui:LogMessage DisplayName="LM: Module Complete" sap:VirtualizedContainerService.HintSize="667,141" sap2010:WorkflowViewState.IdRef="LogMessage_6">
              <ui:LogMessage.Level>
                <InArgument x:TypeArguments="ui:LogLevel">
                  <CSharpValue x:TypeArguments="ui:LogLevel" sap2010:WorkflowViewState.IdRef="CSharpValue`1_61">UiPath.Core.Activities.LogLevel.Info</CSharpValue>
                </InArgument>
              </ui:LogMessage.Level>
              <ui:LogMessage.Message>
                <InArgument x:TypeArguments="x:Object">
                  <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_62">"Completed module"</CSharpValue>
                </InArgument>
              </ui:LogMessage.Message>
            </ui:LogMessage>
          </Sequence>
        </ActivityAction>
      </ui:ForEachRow.Body>
      <ui:ForEachRow.DataTable>
        <InArgument x:TypeArguments="sd:DataTable">
          <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_10">dt_Modules</CSharpValue>
        </InArgument>
      </ui:ForEachRow.DataTable>
    </ui:ForEachRow>
  </Sequence>
</Activity>